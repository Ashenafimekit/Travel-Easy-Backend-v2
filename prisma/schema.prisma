// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String?   @unique
  phone     String    @unique
  password  String
  role      Role      @default(PASSENGER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  passenger     Passenger?
  staff         Staff?
  notifications Notification[]
  auditLogs     AuditLog[]
}

enum Role {
  PASSENGER
  STAFF
}

model Passenger {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())

  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user      User       @relation(fields: [userId], references: [id])
  bookings  Booking[]
  feedbacks Feedback[]
}

model Staff {
  id            String        @id @default(cuid())
  userId        String        @unique
  position      StaffPosition
  hireDate      DateTime      @default(now())
  isDeleted     Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?

  user    User      @relation(fields: [userId], references: [id])
  trips   Trip[]
  Booking Booking[]
}

enum StaffPosition {
  SUPER_ADMIN
  ADMIN
  TICKETER
  DRIVER
}

model Bus {
  id        String    @id @default(cuid())
  busNumber Int       @unique
  capacity  Int
  type      BusType   @default(STANDARD)
  status    BusStatus @default(ACTIVE)
  isDeleted Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  seats Seat[]
  trips Trip[] @relation("TripBus")
}

enum BusType {
  MINIBUS
  STANDARD
  LUXURY
}

enum BusStatus {
  ACTIVE
  MAINTENANCE
  INACTIVE
}

model Seat {
  id          String    @id @default(cuid())
  busId       String
  seatNumber  String
  isAvailable Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  bus     Bus      @relation(fields: [busId], references: [id])
  tickets Ticket[]
}

model Route {
  id                String    @id @default(cuid())
  departure         String
  destination       String
  distanceKm        Float
  price             Float
  estimatedDuration Float
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?

  trips Trip[]

  @@unique([departure, destination])
}

model Trip {
  id            String     @id @default(cuid())
  routeId       String
  driverId      String?
  departureTime DateTime
  arrivalTime   DateTime
  status        TripStatus @default(SCHEDULED)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  deletedAt     DateTime?

  route     Route      @relation(fields: [routeId], references: [id])
  driver    Staff?     @relation(fields: [driverId], references: [id])
  buses     Bus[]      @relation("TripBus")
  bookings  Booking[]
  feedbacks Feedback[]

  // @@unique([routeId, departureTime, arrivalTime, driverId]) // prevent duplicate trips 
}

enum TripStatus {
  SCHEDULED
  ONGOING
  COMPLETED
  CANCELLED
}

model Booking {
  id          String        @id @default(cuid())
  passengerId String? // nullable for staff bookings
  staffId     String? // nullable for passenger bookings
  tripId      String
  bookingDate DateTime      @default(now())
  status      BookingStatus @default(PENDING)
  totalAmount Float
  isDeleted   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?

  passenger Passenger? @relation(fields: [passengerId], references: [id])
  staff     Staff?     @relation(fields: [staffId], references: [id])
  trip      Trip       @relation(fields: [tripId], references: [id])
  tickets   Ticket[]
  payment   Payment?
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model Ticket {
  id        String       @id @default(cuid())
  bookingId String
  seatId    String
  status    TicketStatus @default(BOOKED)
  price     Float
  isDeleted Boolean      @default(false)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  deletedAt DateTime?

  booking Booking @relation(fields: [bookingId], references: [id])
  seat    Seat    @relation(fields: [seatId], references: [id])

  @@unique([seatId, bookingId]) // prevent double-booking same seat in same booking
}

enum TicketStatus {
  BOOKED
  CANCELLED
  USED
}

model Payment {
  id                   String        @id @default(cuid())
  bookingId            String        @unique
  amount               Float
  method               PaymentMethod
  transactionReference String?
  status               PaymentStatus @default(PENDING)
  paidAt               DateTime?
  isDeleted            Boolean       @default(false)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  deletedAt            DateTime?

  booking Booking @relation(fields: [bookingId], references: [id])
}

enum PaymentMethod {
  CASH
  TELE_BIRR
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

model Feedback {
  id          String    @id @default(cuid())
  passengerId String
  tripId      String
  rating      Int
  comment     String?
  submittedAt DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  passenger Passenger @relation(fields: [passengerId], references: [id])
  trip      Trip      @relation(fields: [tripId], references: [id])
}

model Notification {
  id        String             @id @default(cuid())
  userId    String
  type      NotificationType
  content   String
  status    NotificationStatus @default(PENDING)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  deletedAt DateTime?

  user User @relation(fields: [userId], references: [id])
}

enum NotificationType {
  BOOKING_CONFIRMATION
  TRIP_REMINDER
  CANCELLATION
}

enum NotificationStatus {
  SENT
  PENDING
  FAILED
}

model AuditLog {
  id          String    @id @default(cuid())
  action      String
  performedBy String
  timestamp   DateTime  @default(now())
  details     String?
  createdAt   DateTime  @default(now())
  updateAt    DateTime  @updatedAt
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?

  user User @relation(fields: [performedBy], references: [id])
}
